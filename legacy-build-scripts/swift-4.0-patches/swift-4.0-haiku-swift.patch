From 2a3d6c06826f11ec1d51b14634c84398c758d320 Mon Sep 17 00:00:00 2001
From: Calvin Hill <calvin@hakobaito.co.uk>
Date: Mon, 6 Nov 2017 15:11:55 +0000
Subject: [PATCH] StdlibUnittest: temp workarounds for Haiku errno constants

---
 stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb         | 2 +-
 stdlib/private/SwiftPrivateLibcExtras/Subprocess.swift         | 2 +-
 stdlib/private/SwiftPrivatePthreadExtras/PthreadBarriers.swift | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb b/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb
index b8c9f03..787cae2 100644
--- a/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb
+++ b/stdlib/private/StdlibUnittest/StdlibUnittest.swift.gyb
@@ -740,7 +740,7 @@ struct _ParentProcess {
       var ret: CInt
       repeat {
         ret = _stdlib_select(&readfds, &writefds, &errorfds, nil)
-      } while ret == -1  &&  errno == EINTR
+      } while ret == -1  &&  errno == 10
       if ret <= 0 {
         fatalError("select() returned an error")
       }
diff --git a/stdlib/private/SwiftPrivateLibcExtras/Subprocess.swift b/stdlib/private/SwiftPrivateLibcExtras/Subprocess.swift
index 5d77a73..2b797e4 100644
--- a/stdlib/private/SwiftPrivateLibcExtras/Subprocess.swift
+++ b/stdlib/private/SwiftPrivateLibcExtras/Subprocess.swift
@@ -278,7 +278,7 @@ public func posixWaitpid(_ pid: pid_t) -> ProcessTerminationStatus {
   }
 #else
   while waitpid(pid, &status, 0) < 0 {
-    if errno != EINTR {
+    if errno != 10 {
       preconditionFailure("waitpid() failed")
     }
   }
diff --git a/stdlib/private/SwiftPrivatePthreadExtras/PthreadBarriers.swift b/stdlib/private/SwiftPrivatePthreadExtras/PthreadBarriers.swift
index 35f0ff1..b18fe28 100644
--- a/stdlib/private/SwiftPrivatePthreadExtras/PthreadBarriers.swift
+++ b/stdlib/private/SwiftPrivatePthreadExtras/PthreadBarriers.swift
@@ -69,7 +69,7 @@ public func _stdlib_pthread_barrier_init(
 ) -> CInt {
   barrier.pointee = _stdlib_pthread_barrier_t()
   if count == 0 {
-    errno = EINVAL
+    errno = 11
     return -1
   }
   barrier.pointee.mutex = UnsafeMutablePointer.allocate(capacity: 1)
-- 
2.14.2

